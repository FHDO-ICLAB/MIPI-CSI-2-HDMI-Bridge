`timescale 1ns/1ns

`define IVERILOG 1

module buffer_and_out_tb();
//simulated 125MHz clk_dvi_sim is normally generated by PLL
    reg clk_dvi_sim = 0;
    reg clk_csi_base = 0;
    reg clk_csi_EN = 0;
    reg clk_csi_sim = 0;
    reg rst_n_sim = 0;
    reg [15:0] data_in_sim;
    reg data_in_valid_sim;
    wire clk_pix;
    wire data_request;
    wire RGB_out_valid;
    wire [23:0] RGB_out;

localparam RED = 8'h1F;
localparam GREEN = 8'h4F;
localparam BLUE = 8'h22;

    RAM_buffer dut1(
        .clk_a(clk_csi_sim),
        .clk_b(clk_pix),
        .rst_n(rst_n_sim),
        .data_in(data_in_sim),
        .data_in_valid(data_in_valid_sim),
        .data_request(data_request),
        .data_out_valid(RGB_out_valid),
        .data_out(RGB_out)
    );


    video_output_ctrl dut2(
        .clk_ref(clk_dvi_sim),
        .RST_N(rst_n_sim),
        .RGB_data_in(RGB_out),
        .RGB_in_valid(RGB_out_valid),
        .clk_pix_out(clk_pix),
        .pixel_request(data_request),
        .TMDS_clk(),
        .TMDS_data()
    );

task send_frame;
    reg[8:0] i;
    begin
        for (i = 0; i<240; i = i +1) begin 
            send_line({GREEN, RED});
            send_line({BLUE, GREEN});
        end
    end
endtask

task send_line;
    input [15:0] data;
    begin
        #40;
        data_in_valid_sim = 1;
        data_in_sim = data;
        #6400;
        data_in_valid_sim = 0;
        #20;
        data_in_sim = 0;
    end
endtask

initial begin
    $dumpfile("buffer_and_out_tb.vcd");
    $dumpvars(0, buffer_and_out_tb);
end

always begin
    #4 clk_dvi_sim <= ~clk_dvi_sim;
end
always begin
    #10 clk_csi_base <= ~clk_csi_base;
    if (clk_csi_EN) clk_csi_sim <= clk_csi_base;
    else clk_csi_sim <= 0;
end

initial begin
    #30 rst_n_sim = 1;
    clk_csi_EN = 1;
    send_line({GREEN, RED});
    send_line({BLUE, GREEN});
    send_line({GREEN+1'b1, RED+1'b1});
    send_line({BLUE+1'b1, GREEN+1'b1});
    send_line({GREEN-1'b1, RED-1'b1});
    send_line({BLUE-1'b1, GREEN-1'b1});
    send_line({GREEN, RED});
    send_line({BLUE, GREEN});
//write reset test
    clk_csi_EN = 0;
    #140;   //long pause to check write count reset thing
    clk_csi_EN = 1;
    #100;
    data_in_valid_sim = 1;
    data_in_sim = {GREEN, RED};
    #6400;
    data_in_valid_sim = 0;
    data_in_sim = 16'd0;
    #20000;
    $finish;
end
endmodule